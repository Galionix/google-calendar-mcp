name: CI

on:
  push:
    branches: [ main, 'feature/**' ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Test and Coverage (includes build, quality checks, and coverage reporting)
  test-and-coverage:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests with coverage
      run: |
        echo "🧪 Running unit tests with coverage..."
        echo "======================================"
        npm run test:coverage | tee test-output.log
        
        echo ""
        echo "📊 Test Results Summary:"
        echo "======================="
        
        # Extract test results from the log
        TEST_FILES=$(grep "Test Files" test-output.log | tail -1 | sed 's/.*Test Files[[:space:]]*//' | sed 's/[[:space:]]*passed.*//')
        TESTS_PASSED=$(grep "Tests" test-output.log | tail -1 | sed 's/.*Tests[[:space:]]*//' | sed 's/[[:space:]]*passed.*//')
        
        echo "✅ Test Files: $TEST_FILES passed"
        echo "✅ Total Tests: $TESTS_PASSED passed"
        echo "📁 Unit Test Files: $(find src/tests/unit -name '*.test.ts' | wc -l | tr -d ' ') files"
        echo "📁 Source Files: $(find src -name '*.ts' -not -path 'src/tests/*' | wc -l | tr -d ' ') files"
        
        echo ""
        echo "📈 Coverage Summary (from detailed report above):"
        echo "================================================="
        echo "• Lines, Functions, Branches, and Statements coverage shown in table above"
        echo "• Full HTML report available in coverage/index.html artifact"
        
        # Clean up temp file
        rm -f test-output.log
      env:
        NODE_ENV: test
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  # Job 2: Docker Integration Tests (without OAuth requirements)
  docker-tests:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create mock OAuth credentials for Docker testing
      run: |
        # Create a valid JSON structure for testing (won't work for real auth)
        cat > gcp-oauth.keys.json << EOF
        {
          "installed": {
            "client_id": "test-client-id.apps.googleusercontent.com",
            "project_id": "test-project",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_secret": "test-client-secret",
            "redirect_uris": ["http://localhost"]
          }
        }
        EOF
        
    - name: Run Docker tests (without OAuth)
      run: |
        echo "🐳 Running Docker integration tests..."
        echo "======================================="
        
        # Make test script executable
        chmod +x scripts/test-docker.sh
        
        # Run quick Docker tests (container startup, health checks, etc.)
        # This skips OAuth-dependent tests but verifies Docker setup works
        ./scripts/test-docker.sh --quick
        
        echo ""
        echo "📋 Docker Test Summary:"
        echo "======================="
        echo "✅ Container Build: SUCCESS"
        echo "✅ Stdio Mode: SUCCESS"
        echo "✅ HTTP Mode: SUCCESS"
        echo "✅ Health Endpoints: SUCCESS"
        echo "✅ Docker Compose: SUCCESS"
        echo "⚠️  OAuth Integration: SKIPPED (requires credentials)"
        echo ""
        echo "💡 To run full integration tests locally:"
        echo "   1. Set up OAuth credentials (gcp-oauth.keys.json)"
        echo "   2. Run: npm run dev auth:test"
        echo "   3. Run: ./scripts/test-docker.sh --integration"
      env:
        NODE_ENV: test
        
    - name: Upload Docker test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-test-logs
        path: |
          docker-*.log
          /tmp/docker-test-*.log
        retention-days: 7
        if-no-files-found: ignore